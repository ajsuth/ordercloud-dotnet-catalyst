using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace OrderCloud.Catalyst.Integrations.Interfaces
{

	//This interface does not accept card details.Instead it accept tokens representing cards, with the assumption a FE iframe solution is tokenizing cards securely.
	//Only for credit cards. Not thinking about digital wallets, paypall, ACH, ect.These are great, but can be optional, additions.Every site needs to accept credit cards.
	public interface ICreditCardProcessor
	{
		Task<CardTransactionResult> AuthorizeOnlyAsync(CreateCardTransaction transaction, OCIntegrationConfig configOverride = null);
		Task<CardTransactionResult> AuthorizeAndCaptureAsync(CreateCardTransaction transaction, OCIntegrationConfig configOverride = null);
		Task<CardTransactionResult> CapturePriorAuthorizeAsync(ModifyCardTransaction transactionID, OCIntegrationConfig configOverride = null);
		Task<CardTransactionResult> VoidAuthorizationAsync(ModifyCardTransaction transactionID, OCIntegrationConfig configOverride = null);
		Task<CardTransactionResult> RefundCaptureAsync(ModifyCardTransaction transactionID, OCIntegrationConfig configOverride = null);
		Task<CardTransactionStatus> GetTransactionAsync(string transactionID, OCIntegrationConfig configOverride = null);
	}

	public class CardTransactionResult
	{
		/// <summary>
		/// Did the transaction succeed or fail?
		/// </summary>
		public bool Success { get; set; }
		/// <summary>
		/// The processor-generated ID for this specific action. Null if a create attempt failed. 
		/// </summary>
		public string TransactionID { get; set; }
		/// <summary>
		/// ID for the previous transaction being modified.
		/// </summary>
		public string ReferenceTransactionID { get; set; }
		/// <summary>
		/// The raw processor-specific response code. If the transaction failed, this should contain the reason.
		/// </summary>
		public string ResponseCode { get; set; }
		/// <summary>
		/// User readable text explaining the result.
		/// </summary>
		public string ResponseText { get; set; }
	}

	public class ModifyCardTransaction
	{
		/// <summary>
		/// The processor-generated ID that represents the card transaction. 
		/// </summary>
		public string TransactionID { get; set; }
		/// <summary>
		/// The amount to capture, void, or refund. If null, will default to the full amount of the existing transaction.
		/// </summary>
		public string Amount { get; set; }
	}

	public class CreateCardTransaction
	{
		/// <summary>
		/// The OrderCloud Order ID that this card transaction applies to.
		/// </summary>
		public string OrderID { get; set; }
		/// <summary>
		/// The ammount that will be charged to the credit card.
		/// </summary>
		public decimal Amount { get; set; }
		/// <summary>
		/// The currency to charge in - three letter ISO format. 
		/// </summary>
		public string Currency { get; set; }
		/// <summary>
		/// A secure, tokenized representation of the credit card details. Generated by a specific processing provider. 
		/// </summary>
		public string CardToken { get; set; }
		/// <summary>
		/// Card expiration date in MMYY format. 
		/// </summary>
		public string CardExpirationDate { get; set; } // Needed for CardConnect, but not BlueSnap
	}

	// Lots of details here. See
	// https://developer.cardpointe.com/cardconnect-api#inquire
	// https://developers.bluesnap.com/v8976-JSON/docs/retrieve
	public class CardTransactionStatus
	{

	}
}
